'use strict';var app = angular.module('hospiApp', ['ui.router','ngMaterial','angular-loading-bar','ngMessages','vAccordion','ngAnimate','ui.router.title','ngAria','ui.bootstrap','ngMdIcons','ngCookies','elif','mdPickers','cl.paging','unsavedChanges','chart.js']);app.config(function (ChartJsProvider) {    // Configure all charts    ChartJsProvider.setOptions({        colors: ['#97BBCD', '#DCDCDC', '#F7464A', '#46BFBD', '#FDB45C', '#949FB1', '#4D5360']    });    // Configure all doughnut charts    ChartJsProvider.setOptions('doughnut', {        cutoutPercentage: 60    });    ChartJsProvider.setOptions('bubble', {        tooltips: { enabled: false }    });});app.config(['$mdThemingProvider',function($mdThemingProvider){    $mdThemingProvider.definePalette('whiteColor', {        '50': 'ffffff',        '100': 'ffffff',        '200': 'ffffff',        '300': 'ffffff',        '400': 'ffffff',        '500': 'ffffff',        '600': 'ffffff',        '700': 'ffffff',        '800': 'ffffff',        '900': 'ffffff',        'A100': 'ffffff',        'A200': 'ffffff',        'A400': 'ffffff',        'A700': 'ffffff',        'contrastDefaultColor': 'dark',    // whether, by default, text (contrast)        // on this palette should be dark or light        'contrastDarkColors': ['50', '100', //hues which contrast should be 'dark' by default            '200', '300', '400', 'A100'],        'contrastLightColors': undefined    // could also specify this if default was 'dark'    });    $mdThemingProvider.definePalette('sidenavClr', {        '50': 'ede7f6',        '100': 'd1c4e9',        '200': 'b39ddb',        '300': '9575cd',        '400': '7e57c2',        '500': '673ab7',        '600': '5e35b1',        '700': '512da8',        '800': '4527a0',        '900': '311b92',        'A100': 'b388ff',        'A200': '7c4dff',        'A400': '651fff',        'A700': '6200ea',        'contrastDefaultColor': 'light',    // whether, by default, text (contrast)                                            // on this palette should be dark or light        'contrastDarkColors': ['50', '100', //hues which contrast should be 'dark' by default            '200', '300', '400', 'A100'],        'contrastLightColors': undefined    // could also specify this if default was 'dark'    });    $mdThemingProvider.definePalette('Renownclr', {        '50': '194783',        '100': '194783',        '200': '194783',        '300': '194783',        '400': '194783',        '500': '194783',        '600': '194783',        '700': '194783',        '800': '194783',        '900': '194783',        'A100': '194783',        'A200': '194783',        'A400': '194783',        'A700': '194783',        'contrastDefaultColor': 'light',    // whether, by default, text (contrast)                                            // on this palette should be dark or light        'contrastDarkColors': ['50', '100', //hues which contrast should be 'dark' by default            '200', '300', '400', 'A100'],        'contrastLightColors': undefined    // could also specify this if default was 'dark'    });    $mdThemingProvider        .theme("hospiclr")        .primaryPalette("Renownclr")        .accentPalette("blue")        .warnPalette("red");    $mdThemingProvider        .theme("default")        .primaryPalette("Renownclr")        .accentPalette("blue")        .warnPalette("red");    $mdThemingProvider        .theme("inputs")        .primaryPalette("indigo")        .accentPalette("blue")        .warnPalette("red");    /*$mdThemingProvider     .theme("cyan-white")     .primaryPalette("whiteColor")     .accentPalette("blue")     .warnPalette("red");*/    //ssSideNavSectionsProvider.initWithTheme($mdThemingProvider);}])    .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider)    {        cfpLoadingBarProvider.includeSpinner = true;    }])    .config(function($mdDateLocaleProvider) {        $mdDateLocaleProvider.formatDate = function(date) {            return date ? moment(date).format('DD-MM-YYYY') : '';        };        $mdDateLocaleProvider.parseDate = function(dateString) {            var m = moment(dateString, 'DD-MM-YYYY', true);            return m.isValid() ? m.toDate() : new Date(NaN);        };    })    .filter('numKeys', function() {        return function(json)        {            if(typeof json==='object')            {                var keys = Object.keys(json)                return keys.length;            }            else            {                return 0;            }        }    })    .filter('objtostring', function() {        return function(json)        {            if(json != undefined)            {                var data = json.toString();                return data;            }            else            {                return null;            }        }    })    .config(function($provide)    {        $provide.decorator('$state', function($delegate, $stateParams)        {            $delegate.forceReload = function() {                return $delegate.go($delegate.current, $stateParams, {                    reload: true,                    inherit: false,                    notify: true                });            };            return $delegate;        });    })    .filter('objtoArray', function() {        return function(obj) {            const result = [];            angular.forEach(obj, function(val) {                result.push(val);            });            return result;        }    })    .filter('objKeystoArray', function() {        return function(obj) {            const result = [];            angular.forEach(obj, function(value, key) {                result.push(key);            });            return result;        }    });